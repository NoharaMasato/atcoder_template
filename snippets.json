{
  "snippets":[
    {
      "type" : "json",
      "name": "for",
      "snippets_file": "for.json"
    },
    {
      "type" : "json",
      "name": "for_reverse",
      "snippets_file": "for_reverse.json"
    },
    {
      "type" : "json",
      "name": "input",
      "snippets_file": "input.json"
    },
    {
      "type" : "json",
      "name": "vector",
      "snippets_file": "vector.json"
    },
    {
      "type" : "json",
      "name": "ruisekiwa",
      "snippets_file": "ruiseki.json"
    },
    {
      "type" : "json",
      "name": "codeforce",
      "snippets_file": "codeforce.json"
    },
    {
      "type" : "json",
      "name": "yes",
      "snippets_file": "yes.json"
    },
    {
      "type" : "json",
      "name": "no",
      "snippets_file": "no.json"
    },
    {
      "type" : "json",
      "name": "yes_no",
      "snippets_file": "yes_no.json"
    },
    {
      "type" : "json",
      "name": "gcj",
      "snippets_file": "gcj.json"
    },
    {
      "type" : "json",
      "name": "gcd,lcm",
      "snippets_file": "gcd_lcm.json"
    },
    {
      "type" : "cpp",
      "name": "unionfined",
      "prefix": "uf",
      "snippets_file": "UnionFind.cpp",
      "description": "unionfind"
    },
    {
      "type" : "cpp",
      "name": "binary_all_search",
      "prefix": "bas",
      "snippets_file": "BinaryAllSearch.cpp",
      "description": "binary_all_search"
    },
    {
      "type" : "cpp",
      "name": "modint",
      "prefix": "modint",
      "snippets_file": "modint.cpp",
      "description": "modint"
    },
    {
      "type" : "cpp",
      "name": "segtree",
      "prefix": "segtree",
      "snippets_file": "SegmentTree.cpp",
      "description": "SegmentTree"
    }
  ]
}
